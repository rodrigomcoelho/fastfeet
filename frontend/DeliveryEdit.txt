// import React, { useState, useEffect } from 'react';
// import PropTypes from 'prop-types';
// import * as Yup from 'yup';
// import { Form } from '@unform/web';
// // import { Form, Input } from '@rocketseat/unform';
// import { toast } from 'react-toastify';

// import api from '~/services/api';

// import { FormContainer } from '~/styles/_shared/defaultContainer';
// import { Content, View, Label } from '~/styles/_shared/Form/defaultForm';
// import { ButtonSection } from './styles';
// import BackButton from '~/components/BackButton';
// import SubmitButton from '~/components/SubmitButton';
// // import Select from '~/components/Select';
// import Select from '~/components/SelectAsync';
// import Input from '~/components/Input';

// const schema = Yup.object().shape({
//   product: Yup.string().required('Produto é obrigatório'),
//   recipient_id: Yup.number()
//     .typeError('Destinatário é obrigado')
//     .integer()
//     .positive()
//     .required(),
//   deliveryman_id: Yup.number()
//     .integer()
//     .positive()
//     .required()
//     .typeError('Entregador obrigatório'),
// });

// export default function Edit({ match }) {
//   const [delivery, setDelivery] = useState({});
//   const [deliverymen, setDeliverymen] = useState([]);
//   const [recipients, setRecipients] = useState([]);
//   const { id } = match.params;

//   useEffect(() => {
//     async function loadEverything() {
//       async function loadDelivery() {
//         if (id) {
//           const response = await api.get(`/deliveries/${id}`);
//           const { data } = response;
//           if (data) setDelivery(data);
//         }
//       }

//       async function loadDeliverymen() {
//         const response = await api.get('/deliverymen', {
//           params: { all: true, order: 'name id' },
//         });
//         const arrDeliverymen = response.data.map(deliveryman => {
//           return { value: deliveryman.id, label: deliveryman.name };
//         });
//         setDeliverymen(arrDeliverymen);
//       }

//       async function loadRecipients() {
//         const response = await api.get('/recipients', {
//           params: { all: true, order: 'name id' },
//         });
//         const arrRecipients = response.data.map(recipient => {
//           return { value: recipient.id, label: recipient.name };
//         });

//         setRecipients(arrRecipients);
//       }

//       // await loadDeliverymen();
//       // await loadDelivery();
//       // await loadRecipients();
//     }
//     loadEverything();
//   }, [id]);

//   function handleSubmit(data) {
//     async function record() {
//       if (id) {
//         console.tron.log(data);
//         toast.success('Entrega alterada com sucesso');
//       }
//     }
//     record();
//   }
//   return (
//     <FormContainer>
//       <h1>Editando de encomenda</h1>
//       <Form schema={schema} onSubmit={handleSubmit}>
//         <ButtonSection>
//           <BackButton to="/deliveries" />
//           <SubmitButton />
//         </ButtonSection>
//         <Content>
//           <View grid gridSizeColumn="1fr 1fr" columnGap={30}>
//             <div>
//               {/* {console.tron.log(recipients, deliverymen)} */}
//               <Label htmlFor="recipient_id">Destinatário</Label>
//               <Select
//                 name="recipient_id"
//                 options={recipients}
//                 // defaultValue={delivery.recipient_id}
//                 // defaultOption={{ id: delivery.recipient_id }}
//                 placeholder="Selecione um destinatário"
//               />
//             </div>
//             <div>
//               <Label htmlFor="recipient_id">Entregador</Label>
//               <Select
//                 name="deliveryman_id"
//                 options={deliverymen}
//                 // Só consigo passando essa informação fixa
//                 // defaultValue={delivery.recipient_id}
//                 // defaultOption={{ id: delivery.recipient_id }}
//                 //
//                 placeholder="Selecione um destinatário"
//               />
//             </div>
//           </View>
//           <div>
//             <Label htmlFor="product">Nome do produto</Label>
//             <Input name="product" placeholder="Yamaha SX7" />
//           </div>
//           <Input type="hidden" name="id" />
//         </Content>
//       </Form>
//     </FormContainer>
//   );
// }

// Edit.propTypes = {
//   match: PropTypes.shape({
//     params: PropTypes.shape({
//       id: PropTypes.number.isRequired,
//     }).isRequired,
//   }).isRequired,
// };
